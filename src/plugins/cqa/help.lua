---
--  Copyright (C) 2004 - 2018 Universit√© de Versailles Saint-Quentin-en-Yvelines (UVSQ)
--
-- This file is part of MAQAO.
--
-- MAQAO is free software; you can redistribute it and/or
--  modify it under the terms of the GNU Lesser General Public License
--  as published by the Free Software Foundation; either version 3
--  of the License, or (at your option) any later version.
--
--  This program is distributed in the hope that it will be useful,
--  but WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--  GNU Lesser General Public License for more details.
--
--  You should have received a copy of the GNU Lesser General Public License
--  along with this program; if not, write to the Free Software
--  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
---

--- Module cqa.help
-- Defines the cqa:init_help function used to generate the CQA tool help
module ("cqa.help", package.seeall)

-- Returns a cqa-customized help object
-- @return help object
function cqa:init_help ()
   local help = Help:new()
   help:set_name ("maqao-cqa")
   help:set_usage ("maqao cqa <binary> [fct-loops=<functions> | fct-body=<functions> | loop=<loops> | path=<block IDs>] [...]")
   help:set_description ("This module analyzes loops, paths or function bodies. It can analyze all innermost loops in a given function or individual loops using the ID returned by other maqao modules (lprof, analyze).")
   help:add_option ("fct-loops", "fl", "<functions>", false, "Select functions in which innermost loops will be analyzed: foo or \"foo, bar\".\n"..
                    "Names are interpreted as Lua patterns/regexps:\n"..
                    "- for exact match, use \"^foo$\" instead of foo\n"..
                    "- to match all functions (i.e analyze all innermost loops in the binary) use \".*\"");
   help:add_option ("fct-body", "f", "<functions>", false, "Select functions to analyze: foo or \"foo, bar\". Names are interpreted \n"..
                    "as Lua patterns/regexps: for exact match, use \"^foo$\" instead of foo.")
   help:add_option ("loop", "l", "<loops>", false, "Select loops (list of loop IDs) to analyze: 17 or \"17, 19\".")
   help:add_option ("confidence-levels", "conf", "<confidence levels>", false, "For text output format, select confidence levels for displayed reports: gain, potential, hint and expert. Default: gain + potential. To select all: conf=all.")
   help:add_option ("output-format", "of", "<output format>", false, "Select output format: txt (default), html or csv.")
   help:add_option ("output-path", "op", "<output path (html) / file (csv)>", false, "Select output path (html) or file (csv). Default values: cqa_html (html), loops.csv (csv when analyzing loops) and foo.csv (csv when analyzing the foo function).")
   help:add_option ("opt-report", "opr", "<string>", false, "Path to optimization reports generated by Intel/GNU compilers");

   help:add_separator ("Advanced options")
   help:add_option ("path", "p", "<path>", false, "Select path (list of block IDs) to analyze.")
   help:add_option ("if-vectorized-options", "ivo", "<string>", false, "Options for vectorization projection, that will affect \"if vectorized\" cycles and metrics. Available: force_sse, int_novec\n");
   help:add_option ("instructions-modifier", "im", "<string>", false, "Modify instructions before loop analysis. Available:\n"..
                       "- FULLY_VEC: non fully vectorized (scalar or vectorized on partial vector length) vectorizable instructions are replaced with their fully vectorized equivalent\n"..
                       "- COMPUTE_VEC: non fully vectorized (scalar or vectorized on partial vector length) vectorizable compute (no memory) instructions are replaced with their fully vectorized equivalent\n"..
                       "- MEM_VEC: non fully vectorized (scalar or vectorized on partial vector length) vectorizable memory instructions are replaced with their fully vectorized equivalent\n"..
                       "- VECTOR_ISET: only vector (belonging to a vector instruction set) and loop control instructions are considered\n"..
                       "- FP: only FP and loop control instructions are considered\n"..
                       "- FP_ARITH: only FP arithmetical and loop control instructions are considered. FP arithmetical instructions with a source memory operand are replaced with their register equivalent.")
   help:add_option ("instructions-modifier-options", "imo", "<string>", false, "Options to refine instructions modifier behavior. Available: vector_aligned, vector_unaligned, force_sse, int_novec, force_vec, no_gather\n");
   help:add_option ("loop-distance", "dist", "<positive integer>", false, "Override LOOP_MERGE_DISTANCE default value ("..cqa.consts.LOOP_MERGE_DISTANCE.."). Prevents loop unrolling detector from assuming close source lines correspond to the same loop.")
   help:add_option ("max-paths-nb", "max_paths", "<positive integer>", false, "Override MAX_NB_PATHS default value ("..cqa.consts.MAX_NB_PATHS.."), allow to analyze loops with more paths.")
   help:add_option ("ignore-paths", "igp", nil, false, "Ignore paths: assume all blocks as belonging to a unique path. Be aware that such a path has no real existence !");
   help:add_option ("follow-calls", "fc", "\"append\"|\"inline\"", false, "Follow calls by appending/inlining corresponding instructions");
   help:add_option ("select-blocks", "sb", "<string>", false, "Name of a Lua function to use to select loop blocks. Such a function must be defined in loop_blocks_selection_functions.lua (located in current directory) and return a list of blocks from a loop. Example:\n"..
                    "function foo (loop)\n"..
                    "   local blocks = {}\n"..
                    "   for block in loop:blocks() do\n"..
                    "      if (not block:is_loop_exit()) then\n"..
                    "         table.insert (blocks, block)\n"..
                    "      end\n"..
                    "   end\n"..
                    "   return blocks\n"..
                    "end\n")
   help:add_option ("virtual-unrolling", "vu", "<positive integer>", false, "Virtual unrolling factor. Inner loops body will be duplicated accordingly. Implies \"allow-non-innermost\"");
   help:add_option ("uarch-model", "um", "<string>", false, "User micro-architecture model. Path to a Lua file defining a table named __user_uarch_consts containing micro-architectural constants that will be used instead of MAQAO default ones. Target micro-architecture is not changed but only its details !");

-- #PRAGMA_NOSTATIC MEM_PROJ
   help:add_option ("memory-level", "ml", "<string>", false, "Memory level to use when reading data into the file passed with the memory-level-cycles-filepath option");
   help:add_option ("memory-level-filepath", "mlf", "<string>", false, "Path to a Lua file defining a table containing cycles to use for L2/L3/RAM projections");
-- #PRAGMA_STATIC

   help:add_option ("insn-ext-bypass", "ieb", "<string>", false, "Path to a table used to override instructions extensions.")
   help:add_option ("user-data", "ud", "<string>", false, "Path to a Lua file defining a table containing user data");
   help:add_option ("list-metrics", "lm", nil, false, "Generate JSON file listing available metrics and exit (no binary analysis)");

-- #PRAGMA_NOSTATIC UFS
   help:add_option ("ufs-opts", "uo", "\"opt1=val1,opt2=val2...\"", false, "Options driving UFS (Uops Flow Simulator). Available:\n"..
                       " - enable=(yes)|no\n"..
                       " - max_lat_only=yes|(no) (for variable latency instructions like divide and square root, ignore minimum latency)\n"..
                       " - mode=(forward)|dump|bypass\n"..
		       " - ooo_filepath=<path to ooo file> (in dump/bypass modes)\n"..
                       " - FP_load_latency=<positive number> (6 by default)\n"..
                       " - load_latency=<positive number> (4 by default)\n"..
                       " - store_latency=<positive number> (4 by default)\n"..
                       " - groupN_latency=<positive number>\n"..
                       " - X_size=<positive number> (overrides size for X = ROB, RS, LB, LM, SB, PRF, PRF_INT, PRF_FLOAT)\n"..
                       " - max_iters=<positive number> (100 by default): maximum number of retired iterations\n"..
                       " - max_cycles=<positive_number> (5000 by default): maximum number of simulated cycles\n"..
                       " - l1dr_per_iteration=<positive number>\n"..
                       " - l1dr_granularity=(iteration)|cacheline: granularity when computing LFB contribution of each instruction. For cacheline granularity, use unroll option accordingly\n"..
                       " - ignore_cacheline_tags=yes|(no): in the bypass mode, ignores cacheline tags (cache_line=<ID> in the 'special' field)\n"..
                       " - ignore_cache_level=yes|(no): in the bypass mode, ignores cache level (cache_level=1/2... in the 'special' field)\n"..
                       " - unroll=<positive_number> (1 by default): process iterations N by N, required for cacheline granularity\n"..
                       " - save_intermed=yes|(no) (save results after each new retired iteration)\n"..
                       " - nb_active_threads=<positive number> (number of active threads per core in SMT context)\n"..
                       " - verbose=yes|(no)\n");
-- #PRAGMA_STATIC

   help:add_option ("enable-stride-report", "sr", nil, false, "[EXPERIMENTAL] Add data access stride analysis report in hint level")

   Utils:load_common_help_options (help)

   return help
end
