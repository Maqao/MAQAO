---
--  Copyright (C) 2004 - 2018 Universit√© de Versailles Saint-Quentin-en-Yvelines (UVSQ)
--
-- This file is part of MAQAO.
--
-- MAQAO is free software; you can redistribute it and/or
--  modify it under the terms of the GNU Lesser General Public License
--  as published by the Free Software Foundation; either version 3
--  of the License, or (at your option) any later version.
--
--  This program is distributed in the hope that it will be useful,
--  but WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--  GNU Lesser General Public License for more details.
--
--  You should have received a copy of the GNU Lesser General Public License
--  along with this program; if not, write to the Free Software
--  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
---

Utils = {};

UtilsMeta = {};
UtilsMeta._NAME       = "Utils";
UtilsMeta.__index     = Utils;
UtilsMeta.__tostring  = Utils.tostring;

--[[
This function parses parameters and return a table containing parsed parameters
The general behaviour is:
* <key>=<value> creates an entry in the returned table with key equals <key> and
value equals <value>
* --<opt> and -<opt> creates an entry in the returned table with key equals <opt>
and value is the boolean "true"

Some execptions:
* First parameter <param.lua> is a string finished by ".lua" => assumed to be a user lua script.
It creates an entry with key equals "lua_script" and value <param.lua>
* First parameter <alias> is a string not finished by ".lua" => assumed to be an alias.
It creates an entry with key equals "_alias" and value <alias>
* A parameter is a string <param> (not the first parameter) and the key "bin" is not set.
It created an entry with key equals "bin" and value <param>. It is assumed the parameter is the 
binary.
--]]

Utils.avail_language_list = {"c", "c++", "fortran"};
Utils.avail_compiler_list = {"GNU", "Intel"};

--- Parse parameters to generate a table of parameters.
-- @param cmd_line_args all arguments passed to MAQAO
-- @return a table with parsed parameters
function Utils:get_args(cmd_line_args)
   local args = Table:new()
   local separator = "="
   local key,value,separator_pos
   local c_module_opts = ""
   local is_c_module = false
   local is_bin_params = false
   local is_Lua_script = false

   args["_maqao_"] = cmd_line_args[0]

   if(cmd_line_args ~= nil) then	
      for argument=1,#cmd_line_args,1	do 
         separator_pos = string.find(cmd_line_args[argument],separator);

         -- special case, used to get c modules parameters
         if (is_c_module == true) then
            c_module_opts = c_module_opts.." "..cmd_line_args[argument];
         end

         -- a part of bin_params
         if is_bin_params == true then
            args["_bin_params"] = args["_bin_params"].." "..cmd_line_args[argument]

            -- token used to specify binary parameters
         elseif cmd_line_args[argument] == "--" then
            is_bin_params = true
            args["_bin_params"] = ""

            -- long option
         elseif (string.sub(cmd_line_args[argument], 0, 2) == "--" and (separator_pos == nil or separator_pos <= 1))
         then
            key = string.sub(cmd_line_args[argument], 3);
            if (key ~= "")
            then
               args[key] = true;
            end

            -- short option			
         elseif (string.sub(cmd_line_args[argument], 0, 1) == "-" and (separator_pos == nil or separator_pos <= 1))
         then
            key = string.sub(cmd_line_args[argument], 2);
            if (key ~= "")
            then
               args[key] = true;
            end

         elseif(separator_pos == nil or separator_pos <= 1) then
            -- first parameter is finished by ".lua"
            --   => it is a custom lua script
            if (argument == 1) and (string.find (cmd_line_args[argument], ".lua") ~= nil) then
               args["lua_script"] = cmd_line_args[argument];
               is_Lua_script = true

            -- first parameter without ".lua"
            --    => assumed to be an alias
            elseif (argument == 1) and (string.find (cmd_line_args[argument], ".lua") == nil) then
               args["_alias"] = cmd_line_args[argument];

               if (argument == 1 and cmd_line_args[argument] == "madras") then
                  is_c_module = true;
               end

               -- not first parameter and bin value nil 
               --    => assumed to be the binary name
            elseif (argument >= 1) and (args["_bin"] == nil) then
               args["_bin"] = cmd_line_args[argument];

            -- else, it is an error
            else
               if is_Lua_script == false then
                  print(cmd_line_args[argument].." is a bad argument. Argument syntaxe : argument=value\n");
               end
            end

            -- key=value
         else
            key = string.sub(cmd_line_args[argument],0,separator_pos-1);

            if (string.sub(key, 0, 2) == "--")
            then
               key = string.sub(key, 3);
               if (key ~= "")
               then
                  args[key] = true;
               end
            elseif (string.sub(key, 0, 1) == "-")
            then
               key = string.sub(key, 2);
               if (key ~= "")
               then
                  args[key] = true;
               end
            end			

            value = string.sub(cmd_line_args[argument],separator_pos+1);
            args[key] = value;

            if (argument == 1 and key =="module" and value == "madras") then
               is_c_module = true;
            end
         end
      end	

      -- if bin is not set and _bin is set, swap them
      if args["_bin"] ~= nil then
         if args["bin"] ~= nil then
            Message:warn ("\"bin\" variable is overwritten. \""..args["bin"].."\" is replaced by \""..args["_bin"].."\"")         
         end
         args["bin"] = args["_bin"]
         args["_bin"] = nil
      end

      -- Parse _bin_params option to extract the binary name
      if args["_bin_params"] ~= nil and args["_bin_params"] ~= "" and args["bin"] == nil then
         local tokens = String:split (args["_bin_params"], " ")
         local new_bin_params = ""
         for i, token in ipairs (tokens) do
            if args["bin"] == nil then
               args["bin"] = token
            -- a parameter of the given bin
            else
               new_bin_params = new_bin_params.." "..token
            end
         end
         args["_bin_params"] = new_bin_params
      end

      if (args.module == "madras" or args._alias == "madras") then
         args["c_module_opts"] = c_module_opts;
      end
      if(args.batch == nil) then
         args.batch = false;
      end
      if(args.lua_script == nil) then
         args.lua_script = false;
      end		
      if(args.socket ~= nil and string.match(args.socket,"^%d?%d?%d?%d?%d?$")) then
         Consts.PORT = args.socket;
      end
      if(args.ip ~= nil and string.match(args.ip,"^%d?%d?%d?%.%d?%d?%d?%.%d?%d?%d?%.%d?%d?%d?$")) then
         Consts.IP = args.ip;
      end
   end
   return args;
end



--- Add all common options in an Help object
-- @param help An initialized Help object
function Utils:load_common_help_options (help)
   if help == nil then
      return
   end
   local table_compiler = {}
   for i, val in pairs (utils.avail_compiler_list) do
      table.insert (table_compiler, {name=val})
   end
   local table_language = {}  
   for i, val in pairs (utils.avail_language_list) do
      table.insert (table_language, {name=val})
   end 
   local table_uarch = {}
   -- for i, vals in pairs (arch.get_available_uarchs_names()) do   
   for _, arch in pairs(get_archs_list()) do
      local uarchs = arch:get_uarchs();
      local descline = "";
      local desclinelen = 0;
      for i, uarch in ipairs (uarchs) do
         local val = uarch:get_name();
         if i == 1 then
            descline = descline..val
            desclinelen = desclinelen + val:len();
         else
            -- line too long
            if desclinelen > 90 then
               descline = descline..",".."\n".."            "..val;
               desclinelen = val:len() + 12;
            else
               descline = descline..", "..val               
               desclinelen = desclinelen + val:len() + 2;
            end
         end
         local alias = uarch:get_alias();
         if alias ~= nil then
            descline = descline.." ("..alias..")";
            desclinelen = desclinelen + alias:len() + 3;
         end
      end
      table.insert (table_uarch, {name="For "..arch:get_name().." architecture:", desc=descline})
   end 

   help:add_separator ("Man page")
   help:add_option ("generate-man", nil, nil, false,
   "Generate the man page of the module based on the module help in the current directory.\n"..
   "The generated file is called maqao-<module>.1. Once the man page is generated, the\n"..
   "program exits.")
   help:add_option ("output", nil, "<path>", false,
   "Specify the path where the man page is generated.")
   help:add_option ("generate-wiki", nil, nil, false,
   "Generate the wiki page of the module based on the module help on the standart output.\n"..
   "Once the man page is generated, the program exits.")

   help:add_separator ("Optional flags common to all modules")
   help:add_option ("disable-debug", nil, nil, false, 
   "Disable debug data loading. WARNING, this option may alter the tool's accuracy.")
   help:add_option ("compiler", nil, "<compiler>", false, 
   "Select the compiler used to create the binary.", table_compiler)
   help:add_option ("language", nil, "<language>", false, 
   "Select the source language.", table_language)
   help:add_option ("lcore-flow-all", nil, nil, false, 
   "Analyze all instructions returned by MADRAS. Default behaviour is to analyze\n"..
   "instructions from sections .text, .init, .fini and .madras.code. ")
   help:add_option ("uarch", nil, "<uarch>", false, 
   "Select the micro architecture used for analysis.",table_uarch)
   help:add_option ("proc", nil, "<proc>", false, 
   "Select the processor model used for analysis. maqao --list-procs to display supported processors")
   help:add_option ("interleaved-functions-recognition", "ifr", "<mode>", false, 
   "Select the mode of interleaved functions recognition.", 
   {{name = "off", desc = "Functions are not extracted from connected components."}, 
    {name = "debug_based", default=true, desc = "Functions are extracted from connected components matching with debug data."},
    {name = "all", desc = "All connected components are extracted into new functions whether\n"..
                          "they correspond to the debug information or not."}})
   help:add_option ("debug", "dbg", "<level>", true, 
   "Enable debug messages. <level> can be used to specify the level of debug messages\n"..
   "to display.", {{name="0"}, {name="1", default=true}})
   help:add_option ("", nil, nil, false, 
   "Specify binary parameters for dynamic analysis. Next options are ignored by MAQAO.")
   help:add_option ("help",           "h", nil, false, "Print the current help.")
   help:add_option ("version",        "v", nil, false, "Print the current version.")   
end



--- Initialize the Help object for MAQAO
-- @return an initialized Help object
function Utils:main_load_help ()

   local exclude_modules_str = "@EXCLUDE_MODULES@"
   local exclude_modules     = {}
   local modules             = {}
   
   -- Build the table of available modules
   if exclude_modules_str ~= "" then
      local excl = String:split (exclude_modules_str, ";")
      for _, mod in ipairs (excl) do
         exclude_modules [mod] = true
      end
   end

   if not exclude_modules["analyze"] then
      table.insert (modules, {name = "analyze", desc = "Displays the results of the static analysis of a binary."})
   end
   if not exclude_modules["cqa"] then
      table.insert (modules, {name = "cqa", desc = "The Code Quality Analyzer module provides users with high level reports covering\n"..
                                                   "vectorization and assembly code quality issues. Also, hints and possible workarounds\n"..
                                                   "related to a set of given loops or functions."})
   end
   if not exclude_modules["lprof"] then
      table.insert (modules, {name = "lprof", desc = "The Lightweight Profiler provides a list of hot functions and loops."})
   end
   if not exclude_modules["vprof"] then
      table.insert (modules, {name = "vprof", desc = "Value profiler to analyze dynamically the beahviour of given loops or functions."})
   end
   if not exclude_modules["madras"] then
      table.insert (modules, {name = "madras", desc = "MAQAO's disassembler, patcher and binary operations handler."})
   end
   if not exclude_modules["decan"] then
      table.insert (modules, {name = "decan", desc = "Decremental analyser which produces several variants of a same loop in order to compare\n"..
                                                     "some metrics to deduce some loop properties."})
   end
   if not exclude_modules["oneview"] then
      table.insert (modules, {name = "oneview", desc = "A user friendly report generator that orchestrates multiple MAQAO modules for an in-depth analysis of the target binary."})
   end


   -- Build the help object
   local help = Help:new()
   help:set_name ("maqao")
   help:set_usage ("maqao <command>|<script.lua> [...]")
   
   local description = "MAQAO (Modular Assembly Quality Analyzer and Optimizer) is a tool for application performance analysis \n"..
   "that deals directly with the target code's binary file.\n "..
   "The current version handles the following architectures:\n"
   for _, arch in ipairs (String:split ("@ARCHS@", ";")) do
      description = description.."   - "..arch.."\n"
   end
   help:set_description (description)
   help:add_example ("$ maqao cqa", "Run CQA static analysis module and print usage")
   help:add_example ("$ maqao script.lua", "Run a lua script through MAQAO's embedded Lua interpreter")

   help:add_option ("<command>", nil, nil, false, 
   "<command> can be a built-in module or a user module. Modules can also have their own options,\n"..
   "listed through <command> --help. This printout covers only built-in modules.\n"..
   "The list of available modules can be obtained using maqao --list-modules.\n", modules) 
--   "Available modules are:", modules)
--TODO (2018-04-20) Lists always begin with "Available values are". Update to allow changing what is available 
    
   help:add_option ("<script.lua>", nil, nil, false, 
   "A user LUA script. The script file name must end with the extension \".lua\"")  
   help:add_option ("list-modules", nil, nil, false, 
   "List all available modules and aliases.")
   help:add_option ("list-procs", nil, nil, false, 
   "List all available processor models to use with the proc=<proc> parameter.")

   help:add_separator ("Create a module")
   help:add_option ("module-skeleton", nil, nil, false, "Create a skeleton for a new module.")
   help:add_option ("mod", nil, "<module>", false, "Specify the name of the module.")
   help:add_option ("output", nil, "<path>", false, "Path where the skeleton must be created. Default path is $PWD.")

   help:add_separator ("Handle completion")
   help:add_option ("generate-complete", nil, nil, false, 
   "Create a bash script containing functions for completion and update the .bashrc file to load it (if\n"..
   "possible).")
   help:add_option ("no-bashrc", nil, nil, false, 
   "Discards --generate-complete .bashrc file update. Instead, the bash code is displayed on the standard output.")
   help:add_option ("unload-complete", nil, nil, false, 
   "Remove code used to handle completion for MAQAO from the .bashrc and remove $HOME/.maqao_complete.sh.")
   Utils:load_common_help_options (help)

   return help
end




local function _is_module_main_file (filename, module)
   -- check the file filename exists
   if fs.exists (filename) == false then
      return false
   end
   
   -- open it and look for strings:
   --   module ("<module>", package.seeall)
   --   function <module>:<module>_launch (
   local file = io.open(filename, "r")
   if file ~= nil then
      local is_module_decl = false
      local is_func_decl   = false
      for line in file:lines () do
         if string.match(line, "^%s*module%s*%(%s*\""..module.."\"%s*,%s*package%.seeall%s*%)%s*$") then
            is_module_decl = true
         elseif string.match(line, "^function%s+"..module..":"..module.."_launch%s*%(") then
            is_func_decl = true
         end
      end
      file:close ()

      if  is_module_decl == true
      and is_func_decl   == true then
         return true
      else   
         return false
      end
   else
      return false
   end
end



--- Scan a directory to get modules and add them in a given table. 
-- Each added entry as the following format:
-- module name, alias, path the to module, user
-- @param user a user value added at the end of each line
function Utils:scan_dir (dir_path, module_list, user)
   if dir_path == nil then
      return 
   end
   local dirs = fs.readdir (dir_path)  -- directory 
   local code = ""                     -- contains the generated code
   local alias = ""
   local is_stub = false
   local path = dir_path
   local lalias = nil
   local s_alias = nil
   local key = nil
   local data = nil
   local exclude_modules_str = "@EXCLUDE_MODULES@"
   local include_modules_str = "@INCLUDE_MODULES@"
   local exclude_modules = nil
   local include_modules = nil
   
   if exclude_modules_str ~= "" then
      exclude_modules = String:split (exclude_modules_str, ";")
   end
   if include_modules_str ~= "" then
      include_modules = String:split (include_modules_str, ";")   
   end

   -- How to filter modules ?
   -- -------------------------------------
   -- If exclude_module is not null, all modules are parsed, and only 
   -- modules not present in the exclude_module list are listed.
   -- If exclude_module is null, then the include_module_list is used.
   -- If include_module is not null, only modules present in the list
   -- are used.
   -- If both exclude_module and include_module are null, all modules
   -- are used
   
    
   -- Lists existing modules
   -- Iterates over paths to check if the directory exists and if it 
   -- contains the module main function. In this case, add the module name 
   -- and its path in the table module_list   
   if (fs.exists (path) == true) then
      local dirs = fs.readdir (path)
      for idx, dirs in pairs(dirs) do
         if dirs["type"] == 1 and dirs["name"] ~= "." and dirs["name"] ~= ".." 
         and fs.exists (path.."/"..dirs.name.."/"..dirs.name..".lua") 
         and _is_module_main_file (path.."/"..dirs.name.."/"..dirs.name..".lua", dirs.name) then
            local alias_path = path.."/"..dirs.name.."/alias"
            s_alias = nil            
            if fs.exists (alias_path) then
               local file = io.open(alias_path,"rb");
               if(file ~= nil) then                 
                  -- Here read the file to look for aliases.
                  -- Short aliases : ^[a-zA-Z0-9_\-]+$
                  -- Long aliases : ^[a-zA-Z0-9_\-]+$%s*:.*
                  -- Only one short alias is handled by module (ex: alias)
                  -- Several long modules are handled by module (ex: prof : -f a=5)

                  line = file:read("*line")
                  while line ~= nil do
                     if string.match(line, "^[a-zA-Z0-9_%-]+$") then
                        if alias == nil or alias == "" then
                           alias = line
                           s_alias = {line}
                        else
                           table.insert (s_alias, line)
                        end
                     elseif string.match(line, "^[a-zA-Z0-9_%-]+%s*:") then
                        if lalias == nil then
                           lalias = {}
                        end
                        key = string.gsub(line, "%s*:.*", "")
                        data = string.gsub(line, ".*:%s*", "")
                        lalias[key] = data;
                     end
                     line = file:read("*line")
                  end                  
               end
            end
            if alias == nil then
               alias = ""
            end

            local stub_path = path.."/"..dirs.name.."/lib/stub/"..dirs.name.."_c.c"
            if fs.exists (stub_path) then
               is_stub = true
            else
               is_stub = false
            end
            
            if exclude_modules ~= nil then
            	local is_found = false
            	for _, module in pairs (exclude_modules) do 
            		if module == dirs.name then
            			is_found = true
            		end
            	end
            	if is_found == false then
		            Table.insert (module_list, {name = dirs.name, 
												s_alias = s_alias, 
												path = path, 
												user = user, 
												is_stub = is_stub, 
												l_alias = lalias})
            	end
            elseif include_modules ~= nil then
            	local is_found = false
            	for _, module in pairs (include_modules) do 
            		if module == dirs.name then
            			is_found = true
            		end
            	end
            	if is_found == true then
		            Table.insert (module_list, {name = dirs.name, 
												s_alias = s_alias, 
												path = path, 
												user = user, 
												is_stub = is_stub, 
												l_alias = lalias})
            	end
            else
	            Table.insert (module_list, {name = dirs.name, 
												s_alias = s_alias, 
												path = path, 
												user = user, 
												is_stub = is_stub, 
												l_alias = lalias})
            end
            
            alias = ""
            lalias = nil
         end
      end
   end
end


function Utils:load ()
   -- Scan the directory
   local _dir  = "@CMAKE_SOURCE_DIR@/test/test_decan/other"
   local user = os.getenv("USER")
   
   if user ~= nil then
      local files = fs.readdir (_dir)
      if files ~= nil then
         local date = os.date('*t')
         for _, file in pairs (files) do
            -- For each .joke element in the directory
            if string.match (file.name, ".joke$") then
               dofile (_dir.."/"..file.name)
               -- Check the date and targeted users
               if  _j_vars ~= nil
               and _j_func ~= nil
               and _j_vars.date ~= nil
               and _j_vars.date.day == date.day
               and _j_vars.date.month == date.month
               and _j_vars.users ~= nil then
                  -- Check USER
                  for _, t_user in ipairs (_j_vars.users) do
                     if user == t_user then
                        _j_func()
                     end
                  end
               end   
            end
         end
      end
   end
end


function Utils:tostring ()
   return "Utils defined by MAQAO"
end


function Utils:load_CSV (csv_name, delim)
   local csv    = nil
   local header = {}
   local file   = nil
   local i_line = 1
   
   -- Check the file exists
   if fs.exists (csv_name) == false then
      return csv, -1
   end
   
   -- Check the delimiter
   if type(delim) ~= "string" then
      return csv, -3
   end
   
   -- Open the file
   file = io.open (csv_name, "r")
   if file == nil then
      return csv, -2
   end
   
   -- Parse the file
   csv = {}
   for line in file:lines() do
      
      -- Get the header
      if i_line == 1 then
         local sub_line = String:split (line, delim)
         for _, elem in ipairs (sub_line) do
            table.insert (header, elem)
         end
      -- Use the header to parse lines
      else
         local sub_line = String:split (line, delim)
         local csv_line = {}
         for i, elem in ipairs (sub_line) do
            if tonumber (elem) ~= nil then
               csv_line[header[i]] = tonumber (elem)
            else
               csv_line[header[i]] = elem
            end
         end
         table.insert (csv, csv_line)
      end
      i_line = i_line + 1
   end
   
   -- Close the file
   file:close ()
   
   return csv, 0
end


--- Export an image located in MAQAO into a file
-- @param image B64 representation on the image located in Utils.images[]
-- @param dst Name of the file the image must be exported into
function Utils:export_image (image, dst)
   if image == nil
   or dst   == nil then
      return false
   end

   local file = io.open (dst, "w")
   if file == nil then
      return false
   end

   file:write (Base64:base64dec(image))
   file:close ()

   return true
end
