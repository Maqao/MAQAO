---
--  Copyright (C) 2004 - 2018 Universit√© de Versailles Saint-Quentin-en-Yvelines (UVSQ)
--
-- This file is part of MAQAO.
--
-- MAQAO is free software; you can redistribute it and/or
--  modify it under the terms of the GNU Lesser General Public License
--  as published by the Free Software Foundation; either version 3
--  of the License, or (at your option) any later version.
--
--  This program is distributed in the hope that it will be useful,
--  but WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--  GNU Lesser General Public License for more details.
--
--  You should have received a copy of the GNU Lesser General Public License
--  along with this program; if not, write to the Free Software
--  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
---

Help = {};
HelpMeta = {};
HelpMeta._NAME       = "Help";
HelpMeta.__index     = Help;
HelpMeta.__tostring  = Help.tostring;


--- Create a new Help Object
function Help:new()
	local help =  {};
	setmetatable(help,HelpMeta);
   
   --Define internal variables
   help._name        = ""     -- String with the command name
   help._version     = ""     -- String with the version number
   help._copyright   = ""     -- String with copyright description
   help._usage       = ""     -- String describing the usage
   help._description = ""     -- String describing the description
   help._bug         = ""     -- String containing the email address for
                              -- bug reporting.
   help._authors     = {}     -- Table with all author names
   help._options     = {}     -- Table of options: key is long option string
                              --   value is option description. For example
                              --   {"option", {"o", "option", "arg","option description"}}
                              --   will display something like
                              --   "-o, --option=arg    option description"
                              --   and
                              --   {"option", {"o", "option", nil,"option description"}}
                              --   will display something like
                              --   "-o, --option    option description"
   help._examples    = {}     -- Table of examples: values are couple of
                              --   command and description. For example
                              --   {"cmd -o", "run cmd with option -o"}
                              --   will display something like
                              --   "cmd -o        run cmd with option -o"
   
   -- Set default values for internal variables
   help._name        = "<A program>"
   help._usage       = "No usage specified for this command"
   help._description = "No description specified for this command"
   help._copyright   = Consts.MAQAO_COPYRIGHT
   help._bug         = Consts.MAQAO_BUGREPORT
   help._build       = Consts.MAQAO_BUILD
   help._version     = Consts.MAQAO_VERSION
   help._authors[1]  = Consts.MAQAO_AUTHORS
   help._date        = Consts.MAQAO_DATE
   
	return help;
end


--- Set program name 
-- @param str A string with the program name
function Help:set_name (str)
   if str ~= nil then
      self._name = str
   else
      self._name = ""
   end   
end


--- Set program version 
-- @param str A string with the program version
function Help:set_version (str)
   if str ~= nil then
      self._version = str
   else
      self._version = ""
   end   
end


--- Set copyright content (it is assumed str is already formated)
-- @param str A string with usage content
function Help:set_copyright (str)
   if str ~= nil then
      self._copyright = str
   else
      self._copyright = ""
   end   
end


--- Set usage content (it is assumed str is already formated)
-- @param str A string with usage content
function Help:set_usage (str)
   if str ~= nil then
      self._usage = str
   else
      self._usage = ""
   end   
end


--- Set description content (it is assumed str is already formated)
-- @param str A string with description content
function Help:set_description (str)
   if str ~= nil then
      self._description = str
   else
      self._description = ""
   end  
end


--- Set email address to contact to report bugs
-- @param str A string with email address to contact to report bugs
function Help:set_bug (str)
   if str ~= nil then
      self._bug = str
   else
      self._bug = ""
   end  
end


--- Add an author
-- @param str name of the author
function Help:add_author (str)
   local nb_example = table.getn(self._authors)
   
   if str == nil or str == "" then
      return
   end
   
   self._authors[nb_example + 1] = str
end


--- Add an example
-- @param cmd The command line used in the example
-- @param desc An optionnal description for the example
function Help:add_example (cmd, desc)
   local nb_example = table.getn(self._examples)
   local adesc = desc
   
   if cmd == nil or cmd == "" then
      return
   end
   if adesc == nil then
      adesc = ""
   end
   
   self._examples[nb_example + 1] = {cmd=cmd, desc=adesc}
end


--- Add an option
-- @param option Long option name
-- @param short Optional short option name
-- @param arg Optionnal argument name
-- @param is_opt specify if arg is mandatory or optional 
-- @param desc Optionnal description of the option
-- @param values a table of possible values for the option. {name [,desc] [,default=true]}
function Help:add_option (option, short, arg, is_opt, desc, values)
   local ashort = short
   local adesc = desc

   if ashort == nil then
      ashort = ""
   end
   if adesc == nil then
      adesc = ""
   end

   table.insert (self._options, {short=ashort, long=option, desc=adesc, arg=arg, is_opt=is_opt, values=values, hidden=false})
end


--- Add some text in the option section
-- @param text Some text to display.
function Help:add_text (text)
   if text == ""
   or text == nil then
      return
   end
   table.insert (self._options, {name=text, is_text=true, hidden=false})
end


--- Add a hidden option. Hidden options are not available using the classic help command
-- but can be used with --help --show-hidden 
-- @param option Long option name
-- @param short Optional short option name
-- @param arg Optionnal argument name
-- @param is_opt specify if arg is mandatory or optional 
-- @param desc Optionnal description of the option
-- @param values a table of possible values for the option. {name [,desc] [,default=true]}
function Help:add_hidden_option (option, short, arg, is_opt, desc, values)
   local ashort = short
   local adesc = desc

   if ashort == nil then
      ashort = ""
   end
   if adesc == nil then
      adesc = ""
   end

   table.insert (self._options, {short=ashort, long=option, desc=adesc, arg=arg, is_opt=is_opt, values=values, hidden=true})
end


--- Add a separator in option list
-- @param name of the separator
function Help:add_separator (aname)
   table.insert (self._options, {name=aname, is_sep=true, hidden=false})
end


--- Add a hidden separator in option list
-- @param name of the separator
function Help:add_hidden_separator (aname)
   table.insert (self._options, {name=aname, is_sep=true, hidden=true})
end


--- Create a string version of current object
-- @return a string representing the current object
function Help:tostring ()
   return "Help for command "..self._name
end


function Help:print_usage ()
   local br = "<.br>"

   print ("Synopsis:")
   print ("  "..string.gsub(self._usage, br, ""))
   print ("")
end

--- Print help (description, usage, options, examples and bug reporting)
-- @param exit a boolean value. If true, the function exits with code 0
-- @param verbose a boolean value. If true, display 
function Help:print_help (exit, verbose)
   local str = ""
   local nl  = "\n            "
   local br = "<.br>"
   
      
   -- Print usage -------------------------------
   self:print_usage ()
   
   -- Print description -------------------------
   print ("Description:")
   print (""..string.gsub(self._description, br, ""))
   print ("")
   
   -- Print options -----------------------------
   print ("Options:")   
   for i, opt in pairs (self._options) do
      if opt.hidden == false 
      or (verbose == true and opt.hidden == true) then
         if  opt.is_sep ~= true
         and opt.is_text ~= true then
            str = ""
            -- Create the option part
            if opt.short ~= "" then
               str = "    -"..opt.short..", --"..opt.long
            else
               if opt.long:find("^<") ~= nil then
                  str = "        "..opt.long
               else
                  str = "        --"..opt.long
               end
            end
            -- Add the argument if needed
            if opt.arg ~= nil then
               if opt.is_opt == true then
                  str = str.."[="..opt.arg.."]"
               else
                  str = str.."="..opt.arg
               end
            end
            -- Add description
            str = str..nl..string.gsub(string.gsub(opt.desc, br, ""), "\n", nl)
            print (str)
            
            -- values
            if opt.values ~= nil then
               local is_desc = false
               str = "            Available values are: "
               -- scan values to check if one of them has a description
               for i, val in ipairs (opt.values) do
                  if val.desc ~= nil then 
                     is_desc = true
                  end
               end

               -- If there is no descriptions
               if is_desc == false then
                  for i, val in ipairs (opt.values) do
                     if i == 1 then
                        str = str..val.name
                     else
                        -- line too long
                        if str:len() > 90 then
                           print (str..",")
                           str = "            "..val.name
                        else
                           str = str..", "..val.name                     
                        end
                     end
                     -- if it is the default value
                     if val.default == true then
                        str = str.." (default)"
                     end
                  end
                  print (str..".")
               else
                  -- else, if there is descriptions
                  print (str)
                  for i, val in ipairs (opt.values) do
                     str = "            "..val.name
                     if val.default == true then
                        str = str.." (default)"
                     end 
                     str = str.."\n"
                     if val.desc ~= nil then
                        str = str.."                "..val.desc:gsub ("\n", "\n                ").."\n"
                     end
                     print (str)
                  end
               end
            end
            print ("")
         elseif opt.is_sep == true then
            print ("  "..opt.name..":")
         elseif opt.is_text == true then
            print ("\n      "..string.gsub (opt.name, "\n", "\n      ").."\n")
         end
      end
   end
   print ("")

   -- Print examples ----------------------------
   if table.getn (self._examples) > 0 then
      print ("Examples:")
      str = ""
      for i, example in pairs (self._examples) do
		 print ("  "..example.cmd..nl..string.gsub(string.gsub(example.desc, br, ""), "\n", nl))
      end
      print ("")
   end
   
   -- Print bug reporting -----------------------
   print ("Report bugs to <"..self._bug..">.")
   
   if(exit == true) then
      os.exit(0);
   end
end


--- Print version paragraph (program name and version, copyright and authors)
function Help:print_version (exit, verbose)
   local list_authors = "Written by "
   
   -- Print command name ------------------------
   if self._build ~= nil then
	   print (self._name.." "..self._version.." - "..self._build);
   else
   	   print (self._name.." "..self._version);
   end
   
   print ("")
   
   -- Print copyrigth ---------------------------
   if self._copyright ~= "" then
      print (self._copyright)
      print ("")
   end
   
   -- Print authors -----------------------------
   if table.getn(self._authors) == 0 then 
      list_authors = list_authors.."Nobody"
   else
      for i, str in pairs (self._authors) do
         if i > 1 then
            list_authors = list_authors..", "
         end
         list_authors = list_authors..str

         if list_authors:len() > 80 then
            print (list_authors)
            list_authors = ""
         end
      end
   end
   list_authors = list_authors.."."
   print (list_authors)
   
   -- Print compilation parameters --------------
   if verbose == true then
      print ("")
      print ("MAQAO Configuration")
      print ("----------------------------------------------------------------------")
      if "@OPTIM_LEVEL@" ~= "" then
         print ("OPTIM_LEVEL     @OPTIM_LEVEL@")
      end
      if "@DEBUG@" ~= "" then
         print ("DEBUG           @DEBUG@")
      end
      if "@STRIP@" ~= "" then
         print ("STRIP           @STRIP@")
      end
      if "@LUA@" ~= "" then
         print ("LUA             @LUA@")
      end
      if "@CMAKE_C_COMPILER@" ~= "" then
         print ("C COMPILER      @CMAKE_C_COMPILER@")
      end
      if "@CMAKE_CXX_COMPILER@" ~= "" then
         print ("CXX COMPILER    @CMAKE_CXX_COMPILER@")
      end
      if "@ARCHS@" ~= "" then
         print ("ARCHS           @ARCHS@")
      end
      if "@EXCLUDE_ISETS@" ~= "" then
         print ("EXCLUDE_ISETS   @EXCLUDE_ISETS@")
      end
   end
   
   if(exit == true) then
     os.exit(0);
   end
end






