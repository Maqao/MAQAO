--- Declares methods that can be invoked on a function
-- (instance of the 'fct' class)
module fct

-- ------------------ Essential functions ----------------------

--- Returns the asmfile containing a function
-- @return asmfile
function fct:get_asmfile ()

--- Checks whether a function has debug data
-- (allowing to call corresponding getters as get_language...)
-- @return boolean
function fct:has_debug_data ()

--- Returns the short compiler name used to compile a function
-- @return compiler string
function fct:get_compiler_short ()

--- Returns the version of the compiler used to compile a function
-- @return compiler version string
function fct:get_compiler_version ()

--- Returns the language used to write a function
-- @return language (Consts.LANG_*)
function fct:get_language ()

--- Returns the source line where the function was declared
-- @return an integer
function fct:get_decl_line ()

--- Returns the producer string located in debug data
-- @return producer string
function fct:get_producer ()

--- Returns the directory where the file was located
-- @return directory
function fct:get_dir ()

--- Returns the name of a function
-- @return name (string)
function fct:get_name ()

--- Returns the demangled name of a function if available
-- @return name (string)
function fct:get_demname ()

--- Returns the returned variable of a function from debug data
-- @return the type of the returned variable or nil
function fct:get_return_var()

--- Returns the functions parameters from debug data into table
-- Parameters are sub-tables with the following structure
-- <ul>
--   <li>name : Name of the parameter</li>
--   <li>type : type of the parameter</li>
--   <li>location:
--     <ul>
--       <li>reg: name of the register if the parameter is in a register</li>
--       <li>address: memory address of the parameter if it is in memory</li>
--       <li>offset: offset in the stack of the parameter</li>
--       <li>-> note: only filled fields are defined</li>
--     </ul>
--   </li>
-- </ul>
-- @return a table with parameters
function fct:get_parameters()

--- Returns the global MAQAO identifier (ID) of a function
-- @return ID (integer)
function fct:get_id ()

--- Prints the control flow graph (CFG) of a function to a DOT file
-- @return path to the output file
function fct:get_CFG_file_path ()

--- Returns the connected components (CC) of a function
-- @return a table of CC (table of blocks)
function fct:get_CC ()

--- Return the number of connected components
-- @return an integer
function fct:get_nCCs ()

--- Iterates over all loops of a function
-- @return next loop
function fct:loops ()

--- Iterates over innermost loops of a function
-- @return next innermost loop
function fct:innermost_loops ()

--- Iterates over blocks of a function
-- @return next block
function fct:blocks ()

--- Returns a table of predecessor (callers) functions (in the CG)
-- Warning: Each predecessor function will be referenced as many
-- times as it is source of an edge to 'function'
-- @return functions table
function fct:get_predecessors ()

--- Iterates over predecessors (callers) of a function
-- @see fct:get_predecessors
-- @return previous function
function fct:predecessors ()

--- Returns a table of successor (callees) functions (in the CG)
-- Warning: Each successor function will be referenced as many times
-- as it is destination of an edge from 'function'
-- @return functions table
function fct:get_successors ()

--- Iterates over successors (callees) of a function
-- @see fct:get_successors
-- @return next function
function fct:successors ()

--- Gets function entry blocks
-- @return a table f entry blocks
function fct:get_entriesb()

--- Gets function entry instructions
-- @return a table f entry instructions (first instruction of each entry block)
function fct:get_entriesi()

--- Gets function exit blocks
-- @return a table f exit blocks
function fct:get_exitsb()

--- Gets function exit instructions
-- @return a table f exit instructions (last instruction of each exit block)
function fct:get_exitsi()

--- Returns function ranges (a range is a set of consecutive instructions)
-- @return a table of ranges. Each range is a table with the following structure:
-- <ul>
--   <li>start: start adress of the range</li>
--   <li>stop: stop address of the range</li>
--   <li>start_insn: start instruction of the range</li>
--   <li>stop_insn: stop instruction of the range</li>
-- </ul>
function fct:get_ranges()

--- Returns the original function (if CC of a real function)
-- @return a function
function fct:get_original_function ()

-- ------------------ Shortcut functions -----------------------

--- Returns the project containing a function
-- @return project
function fct:get_project ()

--- Returns the name of the source file containing a function
-- @return file name (string)
function fct:get_src_file_name ()

--- Returns the full path (directory + name) of the source file containing a function
-- @return file path (string)
function fct:get_src_file_path ()

--- Returns minimum and maximum source lines defining a function
-- @note "monitored" source file is the one defined in first instruction
-- (in first entry block)
-- @return min, max (ex: 18,24 if function ranges from lines 18 to 24)
function fct:get_src_lines ()

--- Returns the number of loops in a function
-- @return number of loops
function fct:get_nloops ()

--- Returns the number of blocks in a function (excluding virtual blocks, not exposed in LUA structures)
-- @return number of blocks
function fct:get_nblocks ()

--- Returns the number of instructions in a function
-- @return number of instructions
function fct:get_ninsns ()

--- Returns the first (entry) block of a function
-- @return entry block
function fct:get_entry ()

--- Alias to fct:get_entry
function fct:get_first_block ()

--- Returns the first instruction of a function
-- @return an instruction
function fct:get_first_insn ()

--- Returns the number of connected components (CC) of a function
-- @return number of CCs
function fct:get_nb_cc ()

-- -------------------- Other functions ----------------------

--- Run grouping analysis on a function
function fct:analyze_groups()

--- Run extended grouping analysis on a function
-- @param mode A constant in {SSE_OFF, SSE_ON, AVX_ON, VECT_ON}
function fct:analyze_groups_extend(mode)

--- Returns the DDG (Data Dependency Graph) of a function
-- @note Should be applied only to small and simple (reduced number of
-- paths) functions
-- @return DDG (graph)
function fct:get_DDG ()

--- Prints the data dependency graph (DDG) of a function to a DOT file (paths are merged)
-- For each path of the function, prints the corresponding DDG to a DOT file
-- @return path to the output file
function fct:get_DDG_file_path ()

-- -------------------- Meta functions -------------------------

--- Print "Function: <name of the function>" (meta-method)
function fct:tostring ()
