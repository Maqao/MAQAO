--- Declares methods that can be invoked on an instruction
-- (instance of the 'insn' class)
module insn

-- ------------------ Essential functions ----------------------

--- Returns the block containing an instruction
-- @return block
function insn:get_block ()

--- Returns the address of an instruction
-- @return address (integer)
function insn:get_address ()

--- Returns the opcode name of an instruction
-- @return opcode (string)
function insn:get_name ()

--- Returns the assembly code of an instruction
-- For example, "ADDSS 0(%rax),%xmm2"
-- @return assembly code (string)
function insn:get_asm_code ()

--- Returns the binary code of an instruction
-- @return binary code (string)
function insn:get_coding ()

--- Returns the source line of an instruction
-- @return number of the line in the source code
function insn:get_src_line ()

--- Returns the source column of an instruction
-- @return number of the column in the source code
function insn:get_src_column ()

--- Returns the path to the source file containing an instruction
-- @return path to the source file (string)
function insn:get_src_file_path ()

--- Returns the name of an instruction's registers as a flat table
-- @return string table
function insn:get_registers_name ()

--- Returns the read/write flags of an instruction's registers as a flat table.
-- Extended version of get_registers_name
-- @return table of tables with 3 fields: value, read and write
function insn:get_registers_rw ()

--- Returns operands of an instruction as a table<br />
-- Each operand is described in a table, with fields:
-- <ul>
--   <li>For all operands (independently of its type):</li>
--     <ul>
--       <li>type : integer in Consts.{OT_REGISTER, OT_IMMEDIATE, OT_POINTER, OT_MEMORY, OT_MEMORY_RELATIVE, OT_IMMEDIATE_ADDRESS, OT_REGISTER_INDEXED}</li>
--       <li>size : size in bits. For a memory operand, size of the data moved from/to memory</li>
--       <li>value: integer for immediate and pointer operands, string for a register and table for a memory operand</li>
--     </ul>
--   <li>For a register or memory operand:</li>
--     <ul>
--       <li>read : boolean true if read and false otherwise</li>
--       <li>write: boolean true if written and false otherwise</li>
--     </ul>
--   <li>For a register sub-operand of a memory operand:</li>
--     <ul>
--       <li>typex: "segment", "base" or "index"</li>
--     </ul>
-- </ul>
-- The rank of an operand (starting from 0 and usable for MADRAS API) can be obtained by subtracting 1 from the operand key<br />
-- @return operands table
function insn:get_operands ()

--- Returns the first memory operand.
-- The rank of an operand (starting from 0 and usable for MADRAS API) can be obtained by using the "rank" field
-- @see insn:get_operands
-- @return memory operand table
function insn:get_first_mem_oprnd ()

--- Returns the class of an instruction.
-- For example, ADDSS belongs to the class "arithmetic"
-- @return class (integer, compare with constants)
function insn:get_class ()

--- Returns the size of elements handled by an instruction.
-- For example, Consts.DATASZ_32b for ADDSS. For conversion instructions, input elements are considered
-- @return element size (integer, compare with constants)
function insn:get_element_size ()

--- Returns the size of elements handled by an instruction (converted into bits).
-- For example, 32 for ADDSS. For conversion instructions, input elements are considered
-- @return element size in bits (integer)
function insn:get_element_bits ()

--- Returns the type of elements handled by an instruction.
-- For example, "FP" for ADDSS. For conversion instructions, input elements are considered
-- @return element type (integer, compare with constants)
function insn:get_element_type ()

--- Returns the family of an instruction.
-- For example, ADDSS and INC belongs to the family "ADD"
-- @return family (integer, compare with constants)
function insn:get_family ()

--- Checks is SIMD (uses SIMD registers and/or units)
-- For example, INC is not SIMD but ADDSS, yes
-- @return boolean
function insn:is_SIMD ()

--- Checks whether an instruction processes at input integer elements
-- @return boolean
function insn:is_INT ()

--- Checks whether an instruction is SIMD and processes integer elements
-- @return boolean
function insn:is_SIMD_INT ()

--- Checks whether an instruction processes at input FP elements
-- @return boolean
function insn:is_FP ()

--- Checks whether an instruction processes at input a structure or a string
-- @return boolean
function insn:is_struct_or_str ()

--- Checks whether an instruction processes at input single-precision (32 bits) FP elements
-- @return boolean
function insn:is_single_prec ()

--- Checks whether an instruction processes at input double precision (64 bits) FP elements
-- @return boolean
function insn:is_double_prec ()

--- Checks whether an instruction is a prefetch
-- @return boolean
function insn:is_prefetch ()

--- Checks whether an instruction is a load, that is reads data from memory into a register
-- Warning: it is assumed that there are no implicit (out of operands) loads !
-- A warning is emitted for instructions with no operands
-- @return boolean
function insn:is_load()

--- Checks whether an instruction is a store, that is writes data from a register to memory
-- Warning: it is assumed that there are no implicit (out of operands) loads !
-- A warning is emitted for instructions with no operands
-- @return boolean
function insn:is_store()

--- Returns position of the first memory operand, if read
-- NOTE : this function only considers mov sources (GAS syntax)
-- @return source operand index (index value starts at 0)
-- @author Andrès Charif Rubial
function insn:get_operand_src_index ()

--- Returns position of the first memory operand, if written
-- NOTE : this function only considers mov sources (GAS syntax)
-- @return destination operand index (index value starts at 0)
-- @author Andrès Charif Rubial
function insn:get_operand_dest_index ()

--- Checks whether an instruction is SIMD and processes FP (floating-point) elements
-- @return boolean
function insn:is_SIMD_FP ()

--- Checks whether an instruction is SIMD and processes non FP (floating-point) elements
-- @return boolean
function insn:is_SIMD_NOT_FP ()

--- Returns the SIMD width for an SIMD instruction, that is the number of elements processed at input
-- @return number of elements (integer)
function insn:get_SIMD_width ()

--- Checks whether an instruction is packed (a vector instruction)
-- @return boolean
function insn:is_packed ()

--- Returns the effective number of bits read by an instruction.
-- For example, Consts.DATASZ_32b for ADDSS.
-- @return read size (integer, compare with constants)
function insn:get_read_size ()

--- Returns the effective number of bits read by an instruction (converted into bits).
-- For example, 32 for ADDSS.
-- @return read size in bits (integer)
function insn:get_read_bits ()

--- Returns the performance data provided by Agner Fog
-- Performance data are:
-- <ul>
--   <li>min-max number of fused uops</li>
--   <li>list of uops groups, a uops group being a couple of:</li>
--     <ul>
--       <li>a number of uops</li>
--       <li>a list of ports/units accepting these uops</li>
--     </ul>
--   <li>min-max number of latency cycles</li>
--   <li>reciprocal throughput (cycles / instruction ratio)</li>
-- </ul>
-- @see http://www.agner.org/optimize/instruction_tables.pdf
-- @return table containing performance data
function insn:get_dispatch ()

--- Returns the size of an instruction, in bits
-- @return size
function insn:get_bitsize ()

--- Tests whether an instruction is a branch (conditional or not)
-- @return boolean
function insn:is_branch ()

--- Tests whether an instruction is a conditional branch
-- @return boolean
function insn:is_branch_cond ()

--- Tests whether an instruction is an unconditional branch
-- @return boolean
function insn:is_branch_uncond ()

--- Tests whether an instruction is a call
-- @return boolean
function insn:is_call ()

--- Tests whether an instruction is a return
-- @return boolean
function insn:is_return ()

--- Returns the instruction set of an instruction
-- @return instruction set (integer, to compare with constants)
function insn:get_iset ()

--- Returns all groups the instruction belong to into a table
-- @return groups table
function insn:get_groups ()

--- Iterates over groups of an instruction
-- @return next group
function insn:groups ()

--- Returns a group the instruction belong to
-- @return group
function insn:get_first_group ()

--- Changes the function associated to an instruction
-- @param new_fct the new function to associate to the instruction
function insn:set_function (new_fct)

--- Gets the previous instruction
-- @return an instruction
function insn:get_prev()

--- Gets the next instruction
-- @return an instruction
function insn:get_next()

--- Checks if the instruction is an exit
-- @return true if the instruction is an exit, else false
function insn:is_exit()

--- Checks if the instruction is a natural exit (RET)
-- @return true if the instruction is a natural exit, else false
function insn:is_exit_natural()

--- Checks if the instruction is an early exit (JUMP in another function)
-- @return true if the instruction is an early exit, else false
function insn:is_exit_early()

--- Checks if the instruction is a potential exit (indirect call / jump)
-- @return true if the instruction is a potential exit, else false
function insn:is_exit_potential()

--- Checks if the instruction is an exit handler (call to a runtime exit function)
-- @return true if the instruction is an exit exit, else false
function insn:is_exit_handler()

-- ------------------ Shortcut functions -----------------------

--- Returns the project containing an instruction
-- @return project
function insn:get_project ()

--- Returns the asmfile containing an instruction
-- @return asmfile
function insn:get_asmfile ()

--- Returns the function containing an instruction
-- @return a function
function insn:get_function ()

--- Returns the loop containing an instruction
-- @return a loop
function insn:get_loop ()

--- Test whether an instruction has at least one source memory operand
-- @return boolean
function insn:has_src_mem_oprnd ()

--- Test whether an instruction has at least one destination memory operand
-- @return boolean
function insn:has_dst_mem_oprnd ()

--- Returns the number of operands of an instruction
-- @return number of instructions
function insn:get_noprnds ()

--- Returns the assembly code the nth operand of an instruction
-- @param n rank of the operand
-- @return assembly code (string)
function insn:get_oprnd_str (n)

--- Returns the type of the nth operand of an instruction
-- @param n rank of the operand
-- @return type (integer, to compare with constants)
function insn:get_oprnd_type (n)

--- Returns the instruction targetted by a branch instruction
-- @return target instruction
function insn:get_branch_target ()

-- -------------------- Arithmetical check functions -------------------------

--- Checks whether an instruction is a add or a sub
-- @return boolean
function insn:is_add_sub ()

--- Checks whether an instruction is a mul
-- @see insn:is_add_sub
function insn:is_mul ()

--- Checks whether an instruction is an FMA (fused multiply-add/sub)
-- @return boolean
function insn:is_fma ()

--- Checks whether an instruction is a div
-- @see insn:is_add_sub
function insn:is_div ()

--- Checks whether an instruction is a reciprocal approximate
-- @see insn:is_add_sub
function insn:is_rcp ()

--- Checks whether an instruction is a sqrt (square root)
-- @see insn:is_add_sub
function insn:is_sqrt ()

--- Checks whether an instruction is a reciprocal sqrt (square root) approximate
-- @see insn:is_add_sub
function insn:is_rsqrt ()

--- Checks whether an instruction is arithmetical (add, sub, mul, fma, div, rcp, sqrt or rsqrt)
-- @see insn:is_add_sub
function insn:is_arith ()

-- -------------------- Meta functions -------------------------

--- Print "Insn: <assembly code of the instruction>" (meta-method)
-- For example, "Insn: ADDSS 0(%rax),%xmm2"
function insn:tostring ()
