--- Declares methods that can be invoked on a group
-- (instance of the 'group' class)
module group

--- Returns the pattern of a group
-- @param user (integer), allow filtering
-- @return pattern (string)
function group:get_pattern (user)

--- Returns the size of a group
-- @param user (integer), allow filtering
-- @return size (integer)
function group:get_size (user)

--- Returns the loop containing a group
-- @return a loop
function group:get_loop ()

--- Returns the function containing a group
-- @return a loop
function group:get_function ()

--- Returns the asmfile containing a group
-- @return a loop
function group:get_asmfile ()

--- Returns the project containing a group
-- @return a loop
function group:get_project ()

--- Print a group (wraps group_print)
-- @param user (integer), allow filtering
function group:print (user)

--- Returns the pattern of the nth element
-- @param n rank
-- @param user (integer), allow filtering
-- @return pattern (integer)
function group:get_pattern_n (n, user)

--- Returns the instruction corresponding to the nth element
-- @param n rank
-- @param user (integer), allow filtering
-- @return instruction
function group:get_insn_n (n, user)

--- Returns the offset corresponding to the nth element
-- @param n rank
-- @param user (integer), allow filtering
-- @return offset (integer)
function group:get_offset_n (n, user)

--- Returns a group as a table<br />
-- The return table has fields:
-- <ul>
--   <li>size: Number of instructions in the group</li>
--   <li>pattern: A string composed of 'L' (for loads) and 'S' (for stores)</li>
--   <li>loop: The loop the group belongs to</li>
--   <li>insns: A table with fields:</li>
--   <ul>
--       <li>insn: Number of instructions in the group</li>
--       <li>memory_position:position of the memory operand</li>
--       <li>access: "LOAD" or "STORE"</li>
--   </ul>
-- </ul>
-- Following fields are computed using group extended analysis
-- <ul>
--   <li>span: maximum distance between two bytes accessed by instructions belonging to the same group</li>
--   <li>head: set of fresh bytes accessed when moving from one iteration to the next one</li>
--   <li>increment_status: Status of increment computation</li>
--   <li>increment: Increment of the group accross iterations</li>
--   <li>memory_status: Status of memory behavior computation</li>
--   <li>number_accessed_bytes: Number of loaded bytes</li>
--   <li>no_overlap_bytes: Number of bytes loaded once per iteration</li>
--   <li>overlap_bytes: Number of bytes loaded more than once per iteration</li>
-- </ul>
-- @return a table
function group:totable ()

--- Returns the group span (Maximum distance between two accessed bytes into a group)
-- @return an integer
function group:get_span()

--- Returns the group head (Number of bytes loaded by the group from an iteration to another)
-- @return an integer
function group:get_head()

--- Returns the group increment
-- @return an integer
function group:get_increment()

--- Creates a table representing a group
-- @return a table representing the group
function group:print_in_table()

-- ------------------ Shortcut functions -----------------------

--- Iterates over instructions of a group
-- @param user (integer), allow filtering
-- @return next instruction (skipping filtered instructions)
function group:instructions (user)

-- -------------------- Meta functions -------------------------

--- Print "Group: @<address of the group>" (meta-method)
function group:tostring ()
