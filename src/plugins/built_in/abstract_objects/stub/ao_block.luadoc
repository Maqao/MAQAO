--- Declares methods that can be invoked on a block
-- (instance of the 'block' class)
module block

-- ------------------ Essential functions ----------------------

--- Returns the function containing a block
-- @return a function
function block:get_function ()

--- Returns the loop containing a block
-- @return a loop
function block:get_loop ()

--- Returns the identifier (ID) of a block
-- @return block ID (integer)
function block:get_id ()

--- Returns the immediate dominator block
-- @return dominator (block)
function block:get_imm_dominator ()

--- Returns a table of immediate dominated blocks
-- @return blocks table
function block:get_imm_dominated ()

--- Returns the immediate post dominator block
-- asmfile:compute_post_dominance should be called before using
-- this function
-- @return post dominator (block)
function block:get_imm_postdominator ()

--- Returns a table of immediate post dominated blocks
-- asmfile:compute_post_dominance should be called before using
-- this function
-- @return blocks table
function block:get_imm_postdominated ()

--- Returns a table of predecessor blocks (in the CFG)
-- Warning: Each predecessor block will be referenced as many
-- times as it is source of an edge to 'block'. In most cases,
-- there is only one edge from a predecessor block to 'block'.
-- @return blocks table
function block:get_predecessors ()

--- Iterates over predecessors of a block
-- @see block:get_predecessors
-- @return previous block
function block:predecessors ()

--- Returns a table of successor blocks (in the CFG)
-- Warning: Each successor block will be referenced as many times
-- as it is destination of an edge from 'block'. In most cases,
-- there is only one edge from 'block' to a successor block.
-- @return blocks table
function block:get_successors ()

--- Iterates over successors of a block
-- @see block:get_successors
-- @return next block
function block:successors ()

--- Iterates over instructions of a block
-- @return next instruction
function block:instructions ()


-- ------------------ Shortcut functions -----------------------

--- Returns the project containing a block
-- @return project
function block:get_project ()

--- Returns the asmfile containing a block
-- @return asmfile
function block:get_asmfile ()

--- Test whether a block is a loop entry
-- @return boolean
function block:is_loop_entry ()

--- Test whether a block is a loop exit
-- @return boolean
function block:is_loop_exit ()

--- Returns the first instruction of a block
-- @return first instruction
function block:get_first_insn ()

--- Returns the last instruction of a block
-- @return last instruction
function block:get_last_insn ()

-- -------------------- Other functions ----------------------

--- Tests whether (block->dst) is a back edge.
-- In other words, tests whether block is the origin of a back-edge to dst
-- This enables to do an acyclic traversal of the CFG.
-- @param dst destination block
-- @return boolean
function block:is_back_edge_origin (dst)

--- Checks if a block contains an instruction using its name
-- @param insnname name of an instruction to look for
-- @return 1 if the instruction is found
function block:has_instruction(insnname)

--- Gets the number of bytes of a block
-- @return the number of bytes
function block:get_nbytes()

--- Gets the number of instructions of a block
-- @return the number of instructions
function block:get_ninsns()

--- Returns path to the source file defining a block
-- @return path to source file (string)
function block:get_src_file_path()

--- Returns minimum and maximum source lines defining a block
-- @note "monitored" source file is the one defined in first instruction
-- @return min, max (ex: 18,24 if block ranges from lines 18 to 24)
function block:get_src_lines ()

--- Returns the DDG (Data Dependency Graph) of a block
-- @return DDG (graph)
function block:get_DDG ()

--- Prints the data dependency graph (DDG) of a block to a DOT file (paths are merged)
-- For each path of the block, prints the corresponding DDG to a DOT file
-- @return path to the output file
function block:get_DDG_file_path ()

-- -------------------- Meta functions -------------------------

--- Print "Block: <global identifier of the block>" (meta-method)
function block:tostring ()
