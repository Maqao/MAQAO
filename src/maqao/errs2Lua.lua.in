---
--  Copyright (C) 2004 - 2018 Université de Versailles Saint-Quentin-en-Yvelines (UVSQ)
--
-- This file is part of MAQAO.
--
-- MAQAO is free software; you can redistribute it and/or
--  modify it under the terms of the GNU Lesser General Public License
--  as published by the Free Software Foundation; either version 3
--  of the License, or (at your option) any later version.
--
--  This program is distributed in the hope that it will be useful,
--  but WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--  GNU Lesser General Public License for more details.
--
--  You should have received a copy of the GNU Lesser General Public License
--  along with this program; if not, write to the Free Software
--  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
---

--
-- This file converts constants defined in src/maqaoerrs.h into Lua constants.
-- Generated Lua constants are located in src/plugins/built_in/classes/Consts_errs.lua
--


-- These lines are added to explain to lua interpreter where to look for libraries
package.cpath=package.cpath..";@PREFIX@/src/maqao/?.so"

-- For MacOS X
package.cpath=package.cpath..";@PREFIX@/src/maqao/?.dylib"

-- For Windows
package.cpath=package.cpath..";@PREFIX@/src/maqao/?.dll"

-- Load String module to get split function
dofile ("@CMAKE_SOURCE_DIR@/src/plugins/built_in/classes/String.lua")
require "bitops"

-- --------------------------------------------------------
-- Used file names
local in_name   = "@CMAKE_SOURCE_DIR@/src/maqaoerrs.h"
local out_name  = "@CMAKE_SOURCE_DIR@/src/plugins/built_in/classes/Consts_errs.lua"


-- --------------------------------------------------------
-- Tags added in source file to drive the file convertion
local tag_read    = "^//@err_convert_read"       -- Tag to start / stop reading C code
local tag_convert = "^//@err_convert_translate"  -- Tag to start / stop converting C code


-- --------------------------------------------------------
-- Open files

-- Open destination file first in order to create the file, even if it is empty
-- to avoid errors due to dofile() in Consts.lua file because this file should
-- always be openable
local out_file  = io.open (out_name, "w")
if out_file == nil then
   print ("** CRITICAL **: Output file "..out_name.." can not be opened")
   os.exit (0)
end

-- Open source file
local in_file   = io.open (in_name, "r")
if in_file == nil then
   print ("** CRITICAL **: Input file "..in_name.." can not be opened")
   out_file:close ()
   os.exit (0)
end


-- --------------------------------------------------------
-- Initialize a table containing constants to read from the source file
-- These constants are used to generate Lua error codes corresponding to C macros
local csts = {
   --
   MODULE_MASK       = 0,  --
   MODULE_SHIFT      = 0,  --
   ERRORLEVEL_MASK   = 0,  --
   ERRORLEVEL_SHIFT  = 0,  --
   ERRORDESC_MASK    = 0,  --
   ERRORDESC_SHIFT   = 0,  --

   -- Errors level constants (keys are C macro names)
   ERRLVL_NONE       = 0,  -- RESERVED. DO NOT USE
   ERRLVL_NFO        = 0,  -- Info
   ERRLVL_WRN        = 0,  -- Warning
   ERRLVL_ERR        = 0,  -- Error
   ERRLVL_CRI        = 0,  -- Critical
   ERRLVL_MAX        = 0,  -- Maximum error level

   -- A table of defined modules where key is module name and value is the associated value
   -- For exemple, if in C there is [#define MODULE_COMMON   0x01], modules subtable will contain
   -- value tonumber("0x01") for key "MODULE_COMMON"
   modules           = {}, --
   ordered_modules   = {}  --
}


-- --------------------------------------------------------
-- Parse source file
local is_read           = false     -- Boolean used to read some constants
local is_convert        = false     -- Boolean used to convert some constants
local to_convert        = {}        -- Macros to convert, where keys are macros name and values are subtables
                                    -- with the structure {err_level=, module=, err_code=, [comment=]}
local keys_to_convert   = {}        -- Keys (macros name) ordered as they are in the source file

for line in in_file:lines () do
   -- Read tag found, start/stop reading
   if string.match (line, tag_read) then
      if is_read == false then
         is_read = true
      else
         is_read = false
      end

   -- Convert tag found, start/stop converting
   elseif string.match (line, tag_convert) then
      if is_convert == false then
         is_convert = true
      else
         is_convert = false
      end

   -- If reading is on and if a define is found, parse the line
   elseif is_read == true
   and    string.match (line, "^#define ") then
      -- Get the key
      local key = string.gsub (line, " *#define *", "")
      key = string.gsub (key, " +.*", "")

      -- Get the value
      local value = string.gsub (line, ".*"..key.." *", "")
      value = string.gsub (value, " +.*", "")

      if  key ~= "MODULE_MASK"
      and key ~= "MODULE_SHIFT"
      and string.match (key, "^MODULE_") then
         csts.modules[key] = tonumber (value)
         table.insert (csts.ordered_modules, {key=key, value=value})
      else
         -- Check if key exists in csts table and set value if needed
         for cst_key, _ in pairs (csts) do
            if cst_key == key then
               csts[key] = tonumber (value)
            end
         end
      end

   -- If converting is on and if a define is found, parse the line
   elseif is_convert == true
   and    string.match (line, "^#define ") then
      -- Get the key
      local key = string.gsub (line, " *#define *", "")
      key = string.gsub (key, " +.*", "")

      -- Get the value
      local value = string.gsub (line, ".*%(", "")
      value = string.gsub (value, "%).*", "")
      value = string.gsub (value, " ", "")
      value = String:split (value, ",")

      -- Get the optionnal comment based on doxygen syntax. It should be a single line comment
      -- delimited by "/**<" and "*/"
      local comment = nil
      if string.match (line, "/%*%*<.*%*/") then
         comment = string.match (line, "/%*%*<.*%*/")
         comment = string.gsub (comment, "/%*%*<", "-- ")
         comment = string.gsub (comment, "%*/", "")
      end

      to_convert[key] = {err_level=value[1], module=value[2], err_code=value[3], comment=comment}
      table.insert (keys_to_convert, key)
   end
end
in_file:close ()

--[[
-- DEBUG CODE: Display loaded data
print ("=======================================")
for key, value in pairs (csts) do
   if type (value) == "number" then
      print (key.." = "..string.format ("0x%x", value))
   elseif type (value) == "table" then
      for s_key, s_value in pairs (value) do
         print ("   module "..s_key.." = "..string.format ("0x%x", s_value))
      end
   end
end
print ("=======================================")
for key, value in pairs (to_convert) do
   print (key.." = {"..value.err_level..", "..value.module..", "..value.err_code.."}")
end
print ("=======================================")
--]]


-- --------------------------------------------------------
-- Write destination file

-- Write copyright
out_file:write (""..
               "---\n"..
               "--  Copyright (C) 2004 - 2018 Université de Versailles Saint-Quentin-en-Yvelines (UVSQ)\n"..
               "--\n"..
               "-- This file is part of MAQAO.\n"..
               "--\n"..
               "-- MAQAO is free software; you can redistribute it and/or\n"..
               "--  modify it under the terms of the GNU Lesser General Public License\n"..
               "--  as published by the Free Software Foundation; either version 3\n"..
               "--  of the License, or (at your option) any later version.\n"..
               "--\n"..
               "--  This program is distributed in the hope that it will be useful,\n"..
               "--  but WITHOUT ANY WARRANTY; without even the implied warranty of\n"..
               "--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"..
               "--  GNU Lesser General Public License for more details.\n"..
               "--\n"..
               "--  You should have received a copy of the GNU Lesser General Public License\n"..
               "--  along with this program; if not, write to the Free Software\n"..
               "--  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n"..
               "--\n"..
               "\n"..
               "\n"
               )

-- Write warning about the fact the file is generated
out_file:write (""..
               "-- WARNING: This is a generated file. Do not modify it.\n"..
               "-- If you want to add constants, update file \n"..
               "-- "..in_name.."\n"..
               "\n"..
               "\n"
               )


-- Copy readed constants
out_file:write ("Consts.errors = {}\n")
out_file:write ("Consts.errors.ERRLVL_NONE\t= "..string.format ("0x%x", csts.ERRLVL_NONE).."\n")
out_file:write ("Consts.errors.ERRLVL_NFO\t= "..string.format ("0x%x", csts.ERRLVL_NFO).."\n")
out_file:write ("Consts.errors.ERRLVL_WRN\t= "..string.format ("0x%x", csts.ERRLVL_WRN).."\n")
out_file:write ("Consts.errors.ERRLVL_ERR\t= "..string.format ("0x%x", csts.ERRLVL_ERR).."\n")
out_file:write ("Consts.errors.ERRLVL_CRI\t= "..string.format ("0x%x", csts.ERRLVL_CRI).."\n")
out_file:write ("Consts.errors.ERRLVL_MAX\t= "..string.format ("0x%x", csts.ERRLVL_MAX).."\n")
out_file:write ("\n")
for _, val in pairs (csts.ordered_modules) do
   out_file:write ("Consts.errors."..val.key.."\t= "..string.format ("0x%x", val.value).."\n")
end
out_file:write ("\n")
out_file:write ("\n")


-- Generate constants
for _, key in pairs (keys_to_convert) do
   -- Initialize variables
   local value       = to_convert[key]
   local err_code    = 0
   local module      = 0
   local err_level   = 0
   local is_error    = false
   local cst         = 0

   -- Set values as integer
   -- err_code
   if string.match (value.err_code, "^0x[0-9a-fA-F]+$") then
      -- Convert in integer
      err_code = tonumber (value.err_code)
      if err_code == nil
      or err_code < 0 then
         -- error, do not generate the constant
         print ("Error: for error "..key..", error_code is not valid")
         is_error = true
      end
   else
      -- error, do not generate the constant
      print ("Error: for error "..key..", error_code is not valid")
      is_error = true
   end


   -- module
   if string.match (value.module, "^0x[0-9a-fA-F]+$") then
      -- Convert in integer
      module = tonumber (value.module)
      if module == nil
      or module < 0 then
         -- error, do not generate the constant
         print ("Error: for error "..key..", module is not valid")
         is_error = true
      end
   else
      -- Get the corresponding integer value from csts table
      if csts.modules[value.module] ~= nil then
         module = csts.modules[value.module]
      else
         -- error, do not generate the constant
         is_error = true
      end
   end


   -- err_level
   if string.match (value.err_level, "^0x[0-9a-fA-F]+$") then
      -- Convert in integer
      err_level = tonumber (value.err_level)
      if err_level == nil
      or err_level < 0 then
         -- error, do not generate the constant
         print ("Error: for error "..key..", error_level is not valid")
         is_error = true
      end
   else
      -- Get the corresponding integer value from csts table
      if csts[value.err_level] ~= nil then
         err_level = csts[value.err_level]
      else
         -- error, do not generate the constant
         is_error = true
      end
   end

   if is_error == false then
      -- Compute the constant value
      local _cst_module    = math_lshift (math_and (module,    csts.MODULE_MASK),     csts.MODULE_SHIFT)
      local _cst_err_level = math_lshift (math_and (err_level, csts.ERRORLEVEL_MASK), csts.ERRORLEVEL_SHIFT)
      local _cst_err_code  = math_lshift (math_and (err_code,  csts.ERRORDESC_MASK),  csts.ERRORDESC_SHIFT)
      cst = math_or (math_or (_cst_module, _cst_err_level), _cst_err_code)


      -- Write into the file
      out_file:write (string.format ("Consts.errors.%s\t\t= 0x%x", key, cst))
      if value.comment ~= nil then
         out_file:write ("\t\t"..value.comment)
      end
      out_file:write ("\n")
   end
end

out_file:close ()

