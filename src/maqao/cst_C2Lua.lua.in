---
--  Copyright (C) 2004 - 2018 Université de Versailles Saint-Quentin-en-Yvelines (UVSQ)
--
-- This file is part of MAQAO.
--
-- MAQAO is free software; you can redistribute it and/or
--  modify it under the terms of the GNU Lesser General Public License
--  as published by the Free Software Foundation; either version 3
--  of the License, or (at your option) any later version.
--
--  This program is distributed in the hope that it will be useful,
--  but WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--  GNU Lesser General Public License for more details.
--
--  You should have received a copy of the GNU Lesser General Public License
--  along with this program; if not, write to the Free Software
--  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
---

dofile ("@CMAKE_SOURCE_DIR@/src/plugins/built_in/classes/String.lua")

local is_arm64 = "@is_arm64@"

-- Used to store all input files
local inputs = {
   --{
   --   src=<path to the C source file containing constants to extract>, 
   --   dst=<path to the Lua source file containing extracted constants>,
   --   prefix=<prefix added in const : Consts.[<prefix>.]=... >,
   --   rmprefix=<prefix to remove from const. myprefix_myconst will become myconst if rmprefix is set to myprefix_ 
   --   caller=<path to the Lua file calling the dst file>
   --}
   -- arch independant --------------------------------------------------------
   -- =========================================================================
   {
      src="@INCLUDE_OUTPUT_PATH@/version.h",
      dst="@CMAKE_SOURCE_DIR@/src/plugins/built_in/classes/Consts_c.lua",
      prefix="",
      caller="@CMAKE_SOURCE_DIR@/src/plugins/built_in/classes/Consts.lua"
   },
   {
      src="@CMAKE_SOURCE_DIR@/src/arch.h", 
      dst="@CMAKE_SOURCE_DIR@/src/plugins/built_in/classes/Consts_c.lua", 
      prefix="",
      caller="@CMAKE_SOURCE_DIR@/src/plugins/built_in/classes/Consts.lua"
   },
   {
      src="@CMAKE_SOURCE_DIR@/src/maqao/libextends.h", 
      dst="@CMAKE_SOURCE_DIR@/src/plugins/built_in/classes/Consts_c.lua", 
      prefix="",
      caller="@CMAKE_SOURCE_DIR@/src/plugins/built_in/classes/Consts.lua"
   },
   {
      src="@CMAKE_SOURCE_DIR@/src/madras/libmadras.h", 
      dst="@CMAKE_SOURCE_DIR@/src/plugins/built_in/classes/Consts_c.lua", 
      prefix="",
      caller="@CMAKE_SOURCE_DIR@/src/plugins/built_in/classes/Consts.lua"
   },
   {
      src="@CMAKE_SOURCE_DIR@/src/asm/libmasm.h", 
      dst="@CMAKE_SOURCE_DIR@/src/plugins/built_in/classes/Consts_c.lua", 
      prefix="",
      caller="@CMAKE_SOURCE_DIR@/src/plugins/built_in/classes/Consts.lua"
   },
   {
      src="@CMAKE_SOURCE_DIR@/src/madras/libdbg/DwarfLight.h", 
      dst="@CMAKE_SOURCE_DIR@/src/plugins/built_in/classes/Consts_c.lua", 
      prefix="",
      caller="@CMAKE_SOURCE_DIR@/src/plugins/built_in/classes/Consts.lua"
   },
   {
      src="@CMAKE_SOURCE_DIR@/src/analyze/libmcore.h", 
      dst="@CMAKE_SOURCE_DIR@/src/plugins/built_in/classes/Consts_c.lua", 
      prefix="",
      caller="@CMAKE_SOURCE_DIR@/src/plugins/built_in/classes/Consts.lua"
   }
}   
	-- arm64 specific ---------------------------------------------------------
	-- ========================================================================
if is_arm64 == "true" then 
   table.insert (inputs, {
      src="@CMAKE_SOURCE_DIR@/include/arm64_arch.h", 
      dst="@CMAKE_SOURCE_DIR@/src/plugins/built_in/classes/Consts/arm64_c.lua",
      prefix="arm64",
      caller="@CMAKE_SOURCE_DIR@/src/plugins/built_in/classes/Consts/arm64.lua"
   })
   table.insert (inputs, {
      src="@CMAKE_SOURCE_DIR@/src/asm/arm64/arm64_uarch.h", 
      dst="@CMAKE_SOURCE_DIR@/src/plugins/built_in/classes/Consts/arm64_c.lua", 
      prefix="arm64",
      caller="@CMAKE_SOURCE_DIR@/src/plugins/built_in/classes/Consts/arm64.lua"
   })
end

local balise_start = "^//@const_start"
local balise_stop  = "^//@const_stop"
local consts = {}          -- Used to check a constant is not defined twice
local file_in = nil        -- Current input file
local file_out = nil       -- Current output file
local key = nil            -- Used to store the constant name
local value = nil          -- Used to store the constant value
local is_comment = false   -- if true, current line is a comment
local is_enum = false      -- if true, current line belongs to an enum
local is_convert = false   -- if true, lines are converted into Lua
local is_multiline_define = false   --if true, current line is a part of a macro spread over multiple lines
local is_array = false     -- if true, current line is an array
local counter = 0          -- counter for enum
local comment = ""         -- used to store comment

--- Check if a key has already be used to define a constant
-- @param input current input entry (an element of table "inputs")
-- @param key name of the constant to define
local function check_consts (input, key)
   -- Check the constant has not already been set
   if consts[input.prefix][key] ~= "true" then 
      consts[input.prefix][key] = "true"
   else
      print ("#!!# Consts."..key.."  has already been defined")
   end
end


--- Generate the prefix of the constant declaration
-- @param input current input entry (an element of table "inputs")
-- @return the prefix of the constant declaration
local function generate_prefix (input)
   local str = ""
   if input.prefix ~= "" and input.prefix ~= nil then
      str = "Consts."..input.prefix.."."
   else
      str = "Consts."
   end
   return str
end

--- Removes a prefix from a constant declaration
-- @param input current input entry (an element of table "inputs")
-- @param key name of the constant to define
-- @return updated key name with prefix removed
local function remove_prefix (input, key)
   if (type(input.rmprefix) == "string") then 
      str = string.gsub(key, "^"..input.rmprefix, "");
   else
      str = key;
   end 
   return str;
end

--- Handle comments in a single line
local function handle_comment (line)
   local comment = ""

   --  //text
   if string.match(line,"//") then
      comment = string.gsub(line,"^.*//%s*",'');
      line = string.gsub(line,"//.*",'')
      comment = " --"..comment
         
   -- /**<text*/
   elseif string.match(line,"/%*%*<.*%*/") then
      comment = string.gsub(line, "^.*/%*%*<%s*","")
      comment = string.gsub(comment, "%*/%s*$","")
      line = string.gsub(line,"/%*%*<.*%*/",'');   
      comment = " --"..comment
      
   -- /*text*/
   elseif string.match(line,"/%*.*%*/") then
      comment = string.gsub(line, "^.*/%*%s*","")
      comment = string.gsub(comment, "%*/%s*$","")
      line = string.gsub(line,"/%*.*%*/",'');   
      comment = " --"..comment
      
   -- /*... (multiple lines)
   elseif string.match(line,"/%*.*") then
      line = string.gsub(line,"/%*.*",'');   
   end
   
   return line, comment
end

local function print_header (file, fname)
	file:write("---\n"..
               "--  Copyright (C) 2004 - 2018 Université de Versailles Saint-Quentin-en-Yvelines (UVSQ)\n"..
               "--\n"..
               "-- This file is part of MAQAO.\n"..
               "--\n"..
               "-- MAQAO is free software; you can redistribute it and/or\n"..
               "--  modify it under the terms of the GNU Lesser General Public License\n"..
               "--  as published by the Free Software Foundation; either version 3\n"..
               "--  of the License, or (at your option) any later version.\n"..
               "--\n"..
               "--  This program is distributed in the hope that it will be useful,\n"..
               "--  but WITHOUT ANY WARRANTY; without even the implied warranty of\n"..
               "--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"..
               "--  GNU Lesser General Public License for more details.\n"..
               "--\n"..
               "--  You should have received a copy of the GNU Lesser General Public License\n"..
               "--  along with this program; if not, write to the Free Software\n"..
               "--  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n"..
               "--\n\n\n"
	)
	
	file:write("-- WARNING: This is a generated file. Do not modify it.\n"..
	           "-- If you want to add constants, update file \n-- "..fname.."\n\n")
	
end


-- ----------------------------------------------------------------------------
-- ----------------------------------------------------------------------------
--                                  START
-- ----------------------------------------------------------------------------

-- For each file in input, remove the corresponding output
for _, input in pairs (inputs) do
   file_out = io.open(input.dst,"r");
   if file_out ~= nil then
      file_out:close ()
      os.remove (input.dst)
   end
   file_out = io.open(input.dst,"a+");
   print_header (file_out, input.caller)
   file_out:close ()
end


-- For each file in input, parse it
for _, input in pairs (inputs) do
   -- print ("Parse file "..input.src)
   if consts[input.prefix] == nil then
      consts[input.prefix] = {};
   end
   
   file_in  = io.open(input.src,"rb");
   file_out = io.open(input.dst,"a+");
   if file_in == nil and file_out == nil then
      print ("ERROR: Input file "..input.src.." can not be opened")
      print ("ERROR: Output file "..input.dst.." can not be opened")
   elseif file_in == nil then
      print ("ERROR: Input file "..input.src.." can not be opened")
      file_out:close ()
   elseif file_out == nil then
      print ("ERROR: Output file "..input.dst.." can not be opened")
      file_in:close ()
   else
   --print("[CST_C2LUA] Adding "..input.src.." to "..input.dst);
      for line in file_in:lines() do
         -- Begin of a section to convert -------------------------------------
         if string.match(line, balise_start) then
            is_convert = true
            
         -- End of a section to convert ---------------------------------------
         elseif string.match(line, balise_stop) then
            is_convert = false
 
         -- Not a line to convert (or empty/blank line) -----------------------
         elseif is_convert ~= true or string.find (line, "^%s*$") then
      
         -- End of a multi-line comment ---------------------------------------
         elseif string.match(line,"^%s*%*/") and is_comment == true then
            file_out:write ("--\n")
            is_comment = false

         -- Middle of a multi-line comment ------------------------------------
         elseif is_comment then
            line = string.gsub(line,"^%s*%*?/?","--")
            file_out:write (line.."\n")
      
         -- Commented line using // -------------------------------------------
         elseif string.match(line,"^%s*//") then
            line = string.gsub(line,"^%s*//","--")
            file_out:write (line.."\n")
         
         -- Commented line using /* */ or /** */------------------------------------
         elseif string.match(line,"^%s*/%*.*%*/%s*$") then
            line = string.gsub(line,"^%s*/%*%*?","--")
            line = string.gsub(line,"%*/%s$","--")
            file_out:write (line.."\n")
         
         -- Commented line using /* or /** ------------------------------------
         elseif string.match(line,"^%s*/%*%*?") then
            line = string.gsub(line,"^%s*/%*%*?","--")
            is_comment = true
            file_out:write (line.."\n")

         -- End of an array ---------------------------------------------------
         elseif is_array == true and string.match(line,"}%s*;%s*") then
			local str = ""		
			local params = line;
			params = string.gsub (params, ".*{%s*", "")
			params = string.gsub (params, "%s*%}.*", "")
			params = string.gsub (params, "^%s*", "")
			tparams = String:split (params, ",")
			
			for i, p in pairs (tparams) do
		      if i > 1 then
		         str = str..","
		      end
			   
			   if p == "NULL" then
			      str = str.."nil"
		      else
		         str = str..p
		      end
			end
			
         	if string.match(line,"%}") then
         		is_array = false
 				str = str.."}"
         	end
            file_out:write (str.."\n")
            is_array = false
            
         -- End of a block ----------------------------------------------------
         elseif string.match(line,"^%s*}.*;%s*") then
            is_enum = false

         -- Middle of a multi-line macro ------------------------------------
         elseif is_multiline_define == true then
            local ends_with_bslash
            line, ends_with_bslash = string.gsub(line,"\\%s*$","")
            file_out:write (line)
            if ends_with_bslash > 0 then
               file_out:write("..")
            else
               is_multiline_define = false
            end
            file_out:write("\n")

         -- Enum element ------------------------------------------------------
         elseif is_enum == true then
            line, comment = handle_comment (line)
            line = string.gsub(line,"^%s*",'');
            line = string.gsub(line,",?%s*$",'');
            
            if string.match(line,"=") then
               key = string.gsub(line,"%s*=.*",'')
               key = remove_prefix(input, key);
               value = string.gsub(line,".*=%s*",'')
               counter = value
               check_consts (input, key)
               line = generate_prefix (input)..key.." = "..counter
            else
               key = line
               key = remove_prefix(input, key);
               line = generate_prefix (input)..key.." = "..counter
               check_consts (input, key)
            end
            file_out:write (line.." "..comment.."\n")
            counter = counter + 1

         -- Case of #define ---------------------------------------------------
         elseif string.match(line,"#define") then
            local ends_with_bslash
            line, comment = handle_comment (line)
            line = string.gsub(line,"%s*#define%s*",'');
            line = string.gsub(line,"%s*$",'');
            line = string.gsub(line,"%s+",' = ',1);
            line = remove_prefix(input, line);
            key  = string.gsub(line,"%s*=.*",'');
            key  = remove_prefix(input, key);
            line = generate_prefix (input)..line
            check_consts (input, key)
            file_out:write (comment.."\n")
            line, ends_with_bslash = string.gsub(line,"\\%s*$","")
            file_out:write (line)
            -- Detecting an ending backslash, indicating a multi-line #define
            if ends_with_bslash > 0 then
               file_out:write("..")
               is_multiline_define = true
            end
            file_out:write("\n")
		 -- Array element -----------------------------------------------------
		 elseif is_array == true then
			local str = ""		
			local params = line;
			params = string.gsub (params, ".*{%s*", "")
			params = string.gsub (params, "%s*%}.*", "")
			params = string.gsub (params, "^%s*", "")
			tparams = String:split (params, ",")
			
			for i, p in pairs (tparams) do
		       str = str.."," 
			   if p == "NULL" then
			      str = str.."nil"
		      else
		         str = str..p
		      end
			end
            file_out:write (str.."\n")

         -- New enum declared ------------------------------------------------- 
         elseif string.match(line,"enum.*{") then
            is_enum = true
            counter = 0
            
        -- New array declared -------------------------------------------------
         elseif string.match(line,"%[[0-9]*%]%s*=%s*%{") then
			local str = generate_prefix (input)
			local name = line;
			name = string.gsub (name, "%s*%[[0-9]*%]%s*", "")
			name = string.match (name, "[a-z0-9A-Z_]+%s*=")
			name = string.gsub (name, "%s*=%s*", "")
			str = str..name.." = {"
			
			local params = line;
			params = string.gsub (params, ".*{%s*", "")
			params = string.gsub (params, "%s*%}.*", "")
			tparams = String:split (params, ",")
			
			for i, p in pairs (tparams) do
		      if i > 1 then
		         str = str..","
		      end
			   
			   if p == "NULL" then
			      str = str.."nil"
		      else
		         str = str..p
		      end
			end
			
         	if not string.match(line,"%}") then
         		is_array = true
			else
 				str = str.."}"
         	end
            file_out:write (str.."\n")
         end
      end
      file_in:close ()
      file_out:close ()
   end
end
